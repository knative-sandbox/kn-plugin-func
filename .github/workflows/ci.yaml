name: CI

on:
  push:
    branches:
      - "main"
jobs:
  check:
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/composite/go-setup
      - name: Lint Core
        run: make check
      - name: Lint Templates
        run: make check-templates
      - name: Check 'func.yaml' schema
        run: make check-schema
      - name: Check embedded FS
        run: make check-embedded-fs

  tests:
    runs-on: "ubuntu-latest"
    steps:
      - name: Set Environment Variables
        run: |
          echo "KUBECONFIG=${{ github.workspace }}/hack/bin/kubeconfig.yaml" >> "$GITHUB_ENV"
          echo "PATH=${{ github.workspace }}/hack/bin:$PATH" >> "$GITHUB_ENV"
      - uses: actions/checkout@v3
      - uses: ./.github/composite/go-setup
      - name: Install Binaries
        run: ./hack/install-binaries.sh
      - name: Allocate Cluster
        run: ./hack/allocate.sh
      - name: Local Registry
        run: ./hack/registry.sh
      - name: Setup testing images
        run: ./hack/setup-testing-images.sh
      - name: Test All
        run: make test-all
      - uses: codecov/codecov-action@v4
        with:
          files: ./coverage.txt
          flags: e2e

  build:
    needs: [check, test-unit, test-integration, e2e-test, e2e-on-cluster-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/composite/go-setup
      # Standard build tasks
      - name: Build
        run: make cross-platform
      # Upload all build artifacts
      - uses: actions/upload-artifact@v2
        with:
          name: OSX Binary (AMD)
          path: func_darwin_amd64
      - uses: actions/upload-artifact@v2
        with:
          name: OSX Binary (ARM)
          path: func_darwin_arm64
      - uses: actions/upload-artifact@v2
        with:
          name: Linux Binary (AMD)
          path: func_linux_amd64
      - uses: actions/upload-artifact@v2
        with:
          name: Linux Binary (ARM)
          path: func_linux_arm64
      - uses: actions/upload-artifact@v2
        with:
          name: Linux Binary (PPC64LE)
          path: func_linux_ppc64le
      - uses: actions/upload-artifact@v2
        with:
          name: Linux Binary (S390X)
          path: func_linux_s390x
      - uses: actions/upload-artifact@v2
        with:
          name: Windows Binary
          path: func_windows_amd64.exe

  publish-utils-image:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        run: |
          docker buildx create --name multiarch --driver docker-container --use
          docker buildx build . -f Dockerfile.utils \
            --platform=linux/ppc64le,linux/s390x,linux/amd64,linux/arm64 \
            --push \
            -t "ghcr.io/knative/func-utils:latest" \
            --annotation index:org.opencontainers.image.description="Knative Func Utils Image" \
            --annotation index:org.opencontainers.image.source="https://github.com/knative/func" \
            --annotation index:org.opencontainers.image.vendor="https://github.com/knative/func" \
            --annotation index:org.opencontainers.image.url="https://github.com/knative/func/pkgs/container/func-utils"

  publish-image:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/composite/go-setup
      - uses: imjasonh/setup-ko@v0.6
      - run: ko build --platform=linux/ppc64le,linux/s390x,linux/amd64,linux/arm64 -B ./cmd/func
